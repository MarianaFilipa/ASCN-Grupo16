---
- name: Create a namespace
  kubernetes.core.k8s:
    name: db
    api_version: v1
    kind: Namespace
    state: present


# Criar persistent volume para a Base de Dados
# Pensando num escalonamento horizontal:
  # Podemos precisar que multiplos pods acedam o mesmo pv
  # pv não deve ser "único" para cada pvc
- name: Create PV for Database
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: pv001
      spec:
        capacity:
          storage: 20Gi
        accessModes:
          - ReadWriteMany
        persistentVolumeReclaimPolicy: Retain # Depois de o pvc ter sido apagado, para este pv ser apagado, tem ser ser feito manualmente
        storageClassName: local-storage
        #local: # local storage devices mounted on nodes
        #  path: /mnt/data
        # nodeAffinity:
        #   required:
        #     nodeSelectorTerms:
        #     - matchExpressions:
        #       - key: kubernetes.io/hostname
        #         operator: In
        #         values:
        #         - worker1 

    
# Persistent Volume Claim

- name: Create PVC for Database
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: db-pvc
      spec:
        resources:
          requests:
            storage: 20Gi
        accessModes:
          - ReadWriteMany
        #persistentVolumeReclaimPolicy: Retain # Depois de o pvc ter sido apagado, para este pv ser apagado, tem ser ser feito manualmente
        storageClassName: local-storage
        


# Criar um objeto deployment da Database
- name: Create a Deployment object for Database
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: db-deployment # Name of the object
        namespace: default #db
        labels:
          app: db
          tier: database
      spec: # description of the characteristics of the resource
        selector: 
          matchLabels:
            app: db
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: db
              tier: database
          spec:
            containers:
            - name: mysql
              image: mysql:latest
              env: # The variables below could be set on a ConfigMap object
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "true"
              - name: MYSQL_DATABASE  # Create a database with this name
                value: "{{ ghost_db_name }}"
              - name: MYSQL_USER      # Create a user with this name
                value: "{{ ghost_db_user }}"
              - name: MYSQL_PASSWORD  # The user will use this password
                value: "{{ ghost_db_password }}" # Use Secret object in real usage
              ports:
              - containerPort: 3306
              volumeMounts:
              - name: db-persistent-storage  
            #  mountPath: /var/lib/mysql
            volumes:    # Deve ter um persistent volume
            - name: db-persistent-volume
              persistentVolumeClaim:
                claimName: db-pvc  # Request for storage. Can ensure persistency even if the pod is terminated


# Criar um objeto serive da Database: para poder ser acedido por outros pods
- name: Create a Service object for Database
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: db-service # Name of the object
        namespace: default #db
        labels:
          app: db
          tier: database
      spec: # description of the characteristics of the resource
        type: ClusterIP    # Determina que este serviço pode ser acedido por outros pods do cluster
        selector: 
          app: db          # Service for objects label as db
        ports: 
          - targetPort: 3306 # port that containers are listening on
            port: 3306     # port number exposed internally in the cluster
        
# ClusterIP: Exposes the Service on a cluster-internal IP
