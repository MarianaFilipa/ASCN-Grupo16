---
- name: Create a namespace
  kubernetes.core.k8s:
    name: db-namespace
    api_version: v1
    kind: Namespace
    state: present
    definition:
      spec:
        hard:
          requests.cpu: 400m
          limits.cpu: 500m
          requests.mem: 500Mib
          limits.memory: 600Mib
  
# PV: piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using Storage Classes.
# storageclass.kubernetes.io/is-default-class ?
- name: Create StorageClass for Database
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: sc001
      provisioner: kubernetes.io/gce-pd  # internal provisioner
      reclaimPolicy: Retain # Depois de o pvc ter sido apagado, para este pv ser apagado, tem ser ser feito manualmente
      allowVolumeExpansion: true # ? 
      #parameters:
      #  type: gp2  # ssd => tipo do disco 
      volumeBindingMode: Immediate  # Immediate:
                                    # WaitForFirstConsumer:


# Persistent Volume Claim
- name: Create PVC for Database
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: db-pvc
        namespace: db-namespace # default
      spec:
        resources:
          requests:
            storage: 20Gi
        accessModes:
          - ReadWriteOnce
        persistentVolumeReclaimPolicy: Retain # Depois de o pvc ter sido apagado, para este pv ser apagado, tem ser ser feito manualmente
        storageClassName: sc001 # local-storage # não deve estar presente, para que o GKE crie um persistent volume usando o storage class
        


# Criar um objeto deployment da Database
- name: Create a Deployment object for Database
  kubernetes.core.k8s:
    wait: yes
    wait_condition:
      status: "True"
      type: Available
    state: present
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: db-deployment # Name of the object
        namespace: db-namespace # default #db
        labels:
          app: db
          tier: database
      spec: # description of the characteristics of the resource
        selector: 
          matchLabels:
            app: db
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: db
              namespace: db-namespace
              tier: database
          spec:
            containers:
            - name: mysql
              image: mysql:latest
              resources:
                limits:
                  cpu: "300m"
                requests:
                  cpu: "250m"
              env: # The variables below could be set on a ConfigMap object
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "true"
              - name: MYSQL_DATABASE  # Create a database with this name
                value: "{{ ghost_db_name }}"
              - name: MYSQL_USER      # Create a user with this name
                value: "{{ ghost_db_user }}"
              - name: MYSQL_PASSWORD  # The user will use this password
                value: "{{ ghost_db_password }}" # Use Secret object in real usage
              ports:
              - containerPort: 3306
              volumeMounts: # ?
              - mountPath: /var/lib/mysql # ?
                name: db-persistent-storage # ?
            volumes:    # Deve ter um persistent volume
            - name: db-persistent-storage
              persistentVolumeClaim:
                claimName: db-pvc  # Request for storage. Can ensure persistency even if the pod is terminated


# Criar um objeto serive da Database: para poder ser acedido por outros pods
- name: Create a Service object for Database
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: db-service # Name of the object
        namespace: db-namespace #default
        labels:
          app: db
          namespace: db-namespace
          tier: database
      spec: # description of the characteristics of the resource
        type: ClusterIP    # Determina que este serviço pode ser acedido por outros pods do cluster
        # externalName: db-service.db-namespace.svc.cluster.local
        selector: 
          app: db          # Service for objects label as db
        ports: 
          - targetPort: 3306 # port that containers are listening on
            port: 3306     # port number exposed internally in the cluster
        
# ClusterIP: Exposes the Service on a cluster-internal IP