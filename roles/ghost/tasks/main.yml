---
- name: Create a namespace of the app Ghost
  kubernetes.core.k8s:
    name: ghost-namespace
    api_version: v1
    kind: Namespace
    state: present

# Create an static IP
# - name: Create a static IP address Google Kubernetes Engine
#   gcp_compute_address:
#     name: ghost-ip-1
#     address: "{{ ghost_ip }}"
#     region:  us-central1
#     state: present
#     project: "{{ gcp_project }}"
#     auth_kind: "{{ gcp_auth_kind }}"
#     service_account_file: "{{ gcp_cred_file }}"
#   #until: "cluster is not failed"
#   #delay: 60
#   #retries: 3

- name: Create a Service object for Ghost
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1   # Service for exposing Swap
      kind: Service # Create an object swap service.
      metadata:
        name: ghost-service
        namespace: default #ghost-namespace
        labels:
          app: ghost
      spec:
        type: LoadBalancer # Makes the service accessible on a static port on each Node in the cluster.
                       # This port on each node will lead to the swap-service?
        # loadBalancerIP: "{{ ghost_ip }}"
        selector:
          app: ghost 
        ports:
                                        # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
          - targetPort: 2368            # port that containers are listening on
            port: '{{ ghost_port }}'    # port exposed internally in the cluster
            name: http

# Wait for the load balancer to be active (add -n NameSpace after the name of the service if)

- name: Wait for load balancer to have an external ip
  shell: "kubectl get svc ghost-service -o wide --no-headers | awk '{print $4}'"
  register: ip
  until: ip.stdout != '<pending>' # Repete até isto ser verdade
  retries: 10
  delay: 10

- name: Change Ghost_ip from inventory
  lineinfile: 
    dest: inventory/gcp.yml
    regexp: '\s*ghost_ip*'
    line: '  ghost_ip: {{ ip.stdout }}'
    state: present
    backrefs: yes
  
- name: Create a Deployment object for Ghost
  kubernetes.core.k8s:
    state: present
    wait: yes
    wait_condition:
      status: "True"
      type: Available
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: ghost-deployment # Name of the object
        namespace: default # ghost-namespace
        labels:
          app: ghost
      spec: # description of the characteristics of the resource: onde é definido o que este deployment object deverá ter
        replicas: 1 # There is only one object of this type
        selector: 
          matchLabels:
            app: ghost
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: ghost
          spec:
            containers:
            - name: ghost
              image: ghost:5 
              env: # The variables below could be set on a ConfigMap object
              - name: database__client
                value: mysql
              - name: database__connection__host # Create a database with this name
                value: db-service                         # IP database => pod db-service
                                                         # Porta a base de dados?
              - name: database__connection__user          # Create a user with this name
                value: "{{ ghost_db_user }}"
              - name: database__connection__password      # The user will use this password
                value: "{{ ghost_db_password }}"          # Use Secret object in real usage
              - name: database__connection__database      # Create a database with this name
                value: "{{ ghost_db_name }}"
              - name: url
                value: "http://{{ ghost_ip }}:{{ ghost_port }}"
              
              - name: mail__transport
                value: "SMTP"
              - name: mail__options__host
                value: "smtp.mailtrap.io"
              - name: mail__options__port
                value: "2525"
              - name: mail__options__auth__user
                value: "0ca2ad863b7f5b"
              - name: mail__options__auth__pass
                value: "2e7dc632c7883a"
              ports:
              - containerPort: 2368           # Container está exposto na porta 80
            
- name: Search for pod with label app=db
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = db
      - tier in (database)
  register: pod_db

- debug: msg="{{ pod_db.resources[0].metadata.name }}"

- name: Wait for mysql tables to be created
  kubernetes.core.k8s_exec:
    namespace: default
    pod: '{{ pod_db.resources[0].metadata.name }}'
    command: mysql '{{ ghost_db_name }}' -e "select * from users;"
  register: outGhost
  until: outGhost.stdout != ""
  retries: 10
  delay: 5

- debug: msg='{{ outGhost }}'

- name: Create Ghost Admin
  kubernetes.core.k8s_exec:
    namespace: default
    pod: '{{ pod_db.resources[0].metadata.name }}'
    #container: manager
    #ascn123 = \$2b\$10\$IOPRnXn/t5QCPwKyrT/AfuK3grXM/MnjcNOeeHuQRlmY6cdECe1jS
    command: mysql ghost_db -e "update users set name='ascn', password='\$2b\$10\$IOPRnXn/t5QCPwKyrT/AfuK3grXM/MnjcNOeeHuQRlmY6cdECe1jS', email='ascn@example.com', status='active' where id=1;"


- name: Create Horizontal Pod Autoscaler
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: autoscaling/v2 # for cpu utilization use this api version
      kind: HorizontalPodAutoscaler
      metadata:
        name: cpu-autoscale # name of the hpa
        namespace: default
      spec:
        scaleTargetRef:
          apiVersion: apps/v1 # apiVersion of the object we want to scale
          kind: Deployment # type of the object we want to scale
          name: ghost-deployment # name of the deployment object to scale
        maxReplicas: 10
        minReplicas: 1
        metrics: 
        - type: Resource
          resource:
            name: cpu # monitors cpu
            target:
              type: Utilization
              averageUtilization: 75 # if resource utilization of cpu higher than 75%, perform scale up